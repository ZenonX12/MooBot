require('dotenv').config(); // ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env
const axios = require('axios');
const { Client, GatewayIntentBits, EmbedBuilder } = require('discord.js');
const chalk = require('chalk');  // ‡πÉ‡∏ä‡πâ chalk ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏µ

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡πà‡∏≤ DISCORD_TOKEN ‡πÅ‡∏•‡∏∞ DISCORD_WEBHOOK_URL
const checkEnvVars = () => {
  if (!process.env.DISCORD_TOKEN || !process.env.DISCORD_WEBHOOK_URL) {
    console.error(chalk.red("Missing Discord token or webhook URL"));
    process.exit(1);
  }

  const webhookRegex = /^https:\/\/discord.com\/api\/webhooks\/\d+\/[A-Za-z0-9_-]+$/;
  if (!webhookRegex.test(process.env.DISCORD_WEBHOOK_URL)) {
    console.error(chalk.red("Invalid Discord webhook URL format"));
    process.exit(1);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord Webhook
const sendToDiscord = async (message) => {
  try {
    const embed = new EmbedBuilder()
      .setTitle('Bot Status')
      .setDescription(message)
      .setColor('#00FF00')
      .setTimestamp();

    const response = await axios.post(process.env.DISCORD_WEBHOOK_URL, { embeds: [embed] }, {
      headers: { 'Content-Type': 'application/json' }
    });

    if (response.status !== 204) {
      console.error(chalk.red(`Failed to send to Discord: Status code ${response.status}`));
    }
  } catch (error) {
    console.error(chalk.red('Error sending message to Discord:', error.message));
    if (error.response) {
      console.error('Response:', error.response.data);
    }
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏≠‡∏ó
const handleBotStatus = async (message, error = null) => {
  console.log(message);
  await sendToDiscord(`\`\`\`${message}\`\`\``);
  if (error) console.error(chalk.red('Error:', error));
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Client ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î Intent ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
const client = new Client({
  intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent]
});

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß
client.once('ready', () => {
  handleBotStatus('üöÄ Bot is online! üåü');
  console.log(chalk.magenta('Credits: by Xeno & Moobot'));
});

// ‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
const loginBot = async () => {
  try {
    await client.login(process.env.DISCORD_TOKEN);
  } catch (error) {
    handleBotStatus(chalk.red(`‚ùå Login failed: ${error.message || error}`), error);
    process.exit(1);
  }
};

// ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó
client.on('error', (error) => handleBotStatus(chalk.yellow(`‚ö†Ô∏è Error occurred: ${error.message || error}`), error));

// ‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
process.on('uncaughtException', async (error) => {
  await handleBotStatus(chalk.red(`‚ö†Ô∏è Uncaught exception: ${error.message || error}`), error);
  process.exit(1);
});

// ‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
process.on('SIGINT', async () => {
  console.log('Bot is shutting down...');
  await handleBotStatus('üö´ Bot is offline!');
  process.exit(0);
});

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
checkEnvVars();
loginBot();
