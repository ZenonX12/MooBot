const { EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder } = require('discord.js');

const userStats = {}; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
const cooldowns = new Map(); // ‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
const inventory = {}; // ‡∏Ñ‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

module.exports = {
    name: 'fight',
    description: '‡∏ï‡∏µ‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•',

    async execute(message, userBalance) {
        const userId = message.author.id;

        // ‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        const cooldownTime = 5 * 1000;
        if (cooldowns.has(userId)) {
            const lastUsed = cooldowns.get(userId);
            if (Date.now() - lastUsed < cooldownTime) {
                const remainingTime = ((cooldownTime - (Date.now() - lastUsed)) / 1000).toFixed(1);
                return message.reply(`‚è≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏≠‡∏µ‡∏Å ${remainingTime} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
            }
        }
        cooldowns.set(userId, Date.now());

        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà
        if (!userStats[userId]) {
            userStats[userId] = { hp: 150, exp: 0, level: 1, maxHp: 150, attackBonus: 15 };
            inventory[userId] = [];  // ‡∏™‡∏£‡πâ‡∏≤‡∏á inventory ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        }
        let { hp, exp, level, maxHp, attackBonus } = userStats[userId];

        if (hp <= 0) {
            return message.reply('üíÄ ‡∏Ñ‡∏∏‡∏ì‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏´‡∏°‡∏î! ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ü‡∏∑‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡πà‡∏≠‡∏ô!');
        }

        const monsters = [
            { name: 'Goblin', health: 50, attack: 5, reward: 20, exp: 25, image: 'https://example.com/goblin.png' },
            { name: 'Orc', health: 100, attack: 7, reward: 40, exp: 55, image: 'https://example.com/orc.png' },
            { name: 'Dragon', health: 200, attack: 12, reward: 100, exp: 120, image: 'https://example.com/dragon.png' },
            { name: 'Dark Knight (BOSS)', health: 500, attack: 20, reward: 300, exp: 250, rareDrop: 'Legendary Sword', image: 'https://example.com/darkknight.png' }
        ];

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå
        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('monsterSelect')
            .setPlaceholder('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ!')
            .addOptions(monsters.map(monster => ({
                label: monster.name,
                value: monster.name.toLowerCase(),
                description: `‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û: ${monster.health} HP, ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•: ${monster.reward} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`,
                emoji: '‚öîÔ∏è',
            })));

        const fightIntroEmbed = new EmbedBuilder()
            .setColor('#ff9900')
            .setTitle('‚öîÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ!')
            .setDescription(`‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ:`)
            .setFooter({ text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á!' })
            .setTimestamp();

        const row = new ActionRowBuilder().addComponents(selectMenu);

        // ‡∏™‡πà‡∏á Embed ‡πÅ‡∏•‡∏∞ SelectMenu ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå
        await message.reply({ embeds: [fightIntroEmbed], components: [row] });

        // ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π
        const filter = (interaction) => interaction.user.id === message.author.id && interaction.isSelectMenu();

        try {
            const interaction = await message.channel.awaitMessageComponent({ filter, time: 30000 });

            const selectedMonsterName = interaction.values[0];
            const selectedMonster = monsters.find(m => m.name.toLowerCase() === selectedMonsterName);

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!selectedMonster) {
                return interaction.reply('‚ùå ‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!');
            }

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ
            let userCoins = userBalance[userId] || 0;
            let userAttack = Math.floor(Math.random() * 40) + 35 + attackBonus;
            let monsterAttack = Math.max(Math.floor(Math.random() * selectedMonster.attack) + (selectedMonster.attack / 3), 0);

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏Ñ‡∏£‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏≠‡∏•
            if (Math.random() < 0.20) {
                userAttack *= 2;
            }

            let resultMessage = '';
            let embedColor = '#FF0000'; // ‡∏™‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ
            if (userAttack >= selectedMonster.health) {
                let rewardCoins = Math.floor(selectedMonster.reward * 1.5);
                userCoins += rewardCoins;
                exp += Math.floor(selectedMonster.exp * 1.5);
                userBalance[userId] = userCoins;

                resultMessage = `üéâ ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞ **${selectedMonster.name}**! ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö **${rewardCoins}** üí∞ ‡πÅ‡∏•‡∏∞ **${exp}** XP!`;

                // ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏õ
                if (exp >= level * 50) {
                    level += 1;
                    exp = 0;
                    maxHp += 15;
                    hp = maxHp;
                    resultMessage += `\nüÜô **‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏õ‡πá‡∏ô Lv.${level}**! ‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô **${maxHp} HP**!`;
                }

                // ‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏´‡∏≤‡∏¢‡∏≤‡∏Å
                if (selectedMonster.rareDrop && Math.random() < 0.15) {
                    inventory[userId].push(selectedMonster.rareDrop);
                    resultMessage += `\nüéÅ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏´‡∏≤‡∏¢‡∏≤‡∏Å: **${selectedMonster.rareDrop}**!`;
                }

                embedColor = '#28a745'; // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞
            } else {
                hp -= monsterAttack;
                if (hp <= 0) {
                    hp = 0;
                    resultMessage = `üíÄ ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏û‡πâ **${selectedMonster.name}** ‡πÅ‡∏•‡∏∞‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏´‡∏°‡∏î!`;
                } else {
                    resultMessage = `üíî ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏û‡πâ **${selectedMonster.name}**! ‡πÇ‡∏î‡∏ô‡πÇ‡∏à‡∏°‡∏ï‡∏µ **-${monsterAttack} HP** ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ **${hp} HP**`;
                }
            }

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            userStats[userId] = { hp, exp, level, maxHp, attackBonus };

            // ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏≤‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π
            if (Math.random() < 0.25 && hp > 0) {
                let healAmount = Math.floor(Math.random() * 25) + 20;
                hp += healAmount;
                if (hp > maxHp) hp = maxHp;
                resultMessage += `\nüíñ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö **‡∏¢‡∏≤‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π ${healAmount} HP**! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ **${hp} HP**`;
                userStats[userId].hp = hp;
            }

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ
            const fightEmbed = new EmbedBuilder()
                .setColor(embedColor)
                .setTitle(`‚öîÔ∏è ‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏Å‡∏±‡∏ö ${selectedMonster.name}`)
                .setDescription(resultMessage)
                .setImage(selectedMonster.image)
                .addFields(
                    { name: 'üõ°Ô∏è ‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå', value: selectedMonster.name, inline: true },
                    { name: '‚ù§Ô∏è HP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì', value: `${hp}/${maxHp} HP`, inline: true },
                    { name: 'üí∞ ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ', value: `${userCoins} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, inline: true },
                    { name: 'üé≤ ‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ', value: `‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏à‡∏°‡∏ï‡∏µ: ${userAttack}\n‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÇ‡∏à‡∏°‡∏ï‡∏µ: ${monsterAttack}`, inline: false },
                    { name: 'üÜô ‡πÄ‡∏•‡πÄ‡∏ß‡∏•', value: `**Lv. ${level}** (${exp}/${level * 50} XP)`, inline: false }
                )
                .setFooter({ text: '‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á!' })
                .setTimestamp();

            // ‡∏™‡πà‡∏á Embed
            await interaction.update({ embeds: [fightEmbed], components: [] });

        } catch (error) {
            console.error('Error during the fight interaction:', error);
            message.reply('‚è≥ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå! ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á.');
        }
    },
};
